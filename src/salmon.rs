use reqwest::{Client, Url};
use serde::{Deserialize, Serialize};
use serde_with::{serde_as, DefaultOnNull};
use tracing::{debug, info, instrument};

#[instrument(skip(http_client))]
pub async fn get_salmon_log(http_client: Client, username: &str) -> LogList {
    let statink_salmon_api_url = Url::parse(&format!("https://stat.ink/@{username}/salmon3.json"))
        .expect("Unable to create stat.ink Salmon URL");
    debug!("Fetching Salmon log ({statink_salmon_api_url})");

    let salmon_log_request = http_client
        .get(statink_salmon_api_url)
        .send()
        .await
        .expect("Unable to fetch Salmon Log");
    debug!("Transforming Salmon logs to JSON...");

    let out = salmon_log_request
        .json::<LogList>()
        .await
        .expect("Unable to parse Salmon Log");
    debug!("Done!");

    out
}

#[instrument(skip(http_client, link))]
pub async fn add_link_to_salmon_log(http_client: Client, log_uuid: String, link: String) {
    let endpoint_url = Url::parse_with_params(
        "https://stat.ink/api/internal/patch-salmon3-url",
        &[("id", log_uuid)],
    )
    .unwrap();

    debug!("Updating Salmon log");
    let update_request = http_client
        .post(endpoint_url)
        .form(&[("_method", "PATCH"), ("link_url", &link)])
        .send()
        .await;

    let res = update_request.expect("Unable to update Salmon log!");
    assert!(res.status().is_success());
    info!("Updated Salmon log!");
}

pub fn tide_to_abbr(key: &str) -> &'static str {
    match key {
        "low" => "LT",
        "normal" => "NT",
        "high" => "HT",
        _ => "UNKNONW",
    }
}

// Code below generated by https://app.quicktype.io
pub type LogList = Vec<Log>;

#[serde_as]
#[allow(clippy::struct_excessive_bools)]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Log {
    pub id: String,
    pub url: String,
    pub uuid: String,
    pub private: bool,
    pub big_run: bool,
    pub start_at: Time,

    pub golden_eggs: u16,
    pub danger_rate: Option<u16>,
    pub waves: Vec<Wave>,
}

#[serde_as]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Wave {
    pub tide: IntlKey,
    pub event: Option<IntlKey>,
    #[serde_as(deserialize_as = "DefaultOnNull")]
    pub golden_delivered: u16,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IntlKey {
    pub key: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Time {
    pub time: i64,
    pub iso8601: String,
}
