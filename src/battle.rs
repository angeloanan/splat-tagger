use reqwest::{Client, Url};
use serde::{Deserialize, Serialize};
use tracing::{debug, info, instrument};

#[instrument(skip(http_client))]
pub async fn get_battle_log(http_client: Client, username: &str) -> LogList {
    let statink_battle_api_url =
        Url::parse(&format!("https://stat.ink/@{username}/spl3/index.json"))
            .expect("Unable to create stat.ink Splat URL");
    debug!("Fetching Battle log ({statink_battle_api_url})");

    let battle_log_request = http_client
        .get(statink_battle_api_url)
        .send()
        .await
        .expect("Unable to fetch Battle Log");
    debug!("Transforming Battle logs to JSON...");

    let out = battle_log_request
        .json::<LogList>()
        .await
        .expect("Unable to parse Battle logs");
    debug!("Done!");

    out
}

#[instrument(skip(http_client, link))]
pub async fn add_link_to_battle_log(http_client: Client, log_uuid: String, link: String) {
    let endpoint_url = Url::parse_with_params(
        "https://stat.ink/api/internal/patch-battle3-url",
        &[("id", log_uuid)],
    )
    .unwrap();

    debug!("Updating Battle log");
    let update_request = http_client
        .post(endpoint_url)
        .form(&[("_method", "PATCH"), ("link_url", &link)])
        .send()
        .await;

    let res = update_request.expect("Unable to update Salmon log!");
    assert!(res.status().is_success());
    info!("Updated Battle log!");
}

pub fn lobby_to_abbr(key: &str) -> &'static str {
    match key {
        "regular" => "Turf",
        "event" => "Challenge",
        "bankara_challenge" => "Series",
        "bankara_open" => "Open",
        "splatfest_open" => "Splatfest",
        "splatfest_challenge" => "Splatfest Pro",
        _ => "UNKNONW",
    }
}

pub fn rule_to_abbr(key: &str) -> &'static str {
    match key {
        "nawabari" => "Turf",
        "tricolor" => "Tricolor",
        "area" => "Zones",
        "hoko" => "Rainmaker",
        "asari" => "Clam",
        "yagura" => "Tower",
        _ => "UNKNOWN",
    }
}

// Code below generated by https://quicktype.io

pub type LogList = Vec<Log>;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Log {
    pub id: String,
    pub url: String,
    pub uuid: String,
    pub start_at: Time,

    pub lobby: IntlKey,
    pub rule: IntlKey,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct IntlKey {
    pub key: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Time {
    pub time: i64,
    pub iso8601: String,
}
